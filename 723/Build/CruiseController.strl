module CruiseSpeedModule:

input Set;
input QuickAccel;
input QuickDecel;
input Speed : float;
input CruiseState : integer;

output ManageCruiseSpeed; % Hapus output, pakai signal!
output CruiseSpeed := 0.0f : float; % Hapus output, pakai signal!

constant SpeedInc = 2.5f : float;
constant SpeedMax = 150.0f : float;
constant SpeedMin = 30.0f : float;

signal SetSpeed, FirstOn, AccelSpeed, DecelSpeed, TargetCruiseSpeed in

    run CruiseSpeedControlFSM
    ||
    run CruiseSpeedResolver

end signal
end module
% >>> CRUSECONTROLLER_STRL

% We define module interconnections here for ease of use in development.
% This also gives a high level overview of the whole system at a glance.

% ThrottleControlModule Sub-Module
% Manages the speed of the vehicle via PID algorithm or via Accelerator
module ThrottleControlModule:

input Accel : float;
input CruiseState : integer;
input CruiseSpeed : float;
input Speed : float;

output ThrottleCmd : float;

signal ResetPI, UseAuto in

run ThrottleResolver
||
run ThrottleControlFSM

end signal
end module

% CruiseSpeedModule Sub-Module
% Allows CruiseSpeed to be changed when appropriate
module CruiseSpeedModule:

input Set;
input QuickAccel;
input QuickDecel;
input Speed : float;
input CruiseState : integer;

output ManageCruiseSpeed;
output CruiseSpeed := 0.0f : float;

constant SpeedInc = 2.5f : float; 
constant SpeedMax = 150.0f : float;
constant SpeedMin = 30.0f : float;

signal SetSpeed, FirstOn, AccelSpeed, DecelSpeed
in

run CruiseSpeedControlFSM
||
run CruiseSpeedResolver

end signal
end module

%Computational Sub Module
module ComputationalModule:
input QuickAccel, QuickDecel, Set;
input Speed : float;
input Accel : float;
input CruiseState := 1 : integer;

output CruiseSpeed := 0.0f : float;
output ThrottleCmd := 0.0f : float;

signal ManageCruiseSpeed in

run CruiseSpeedModule
||
run ThrottleControlModule

end signal
end module

% CruiseController Global Module
module CruiseController:

input QuickAccel, QuickDecel, Resume, On, Off, Set;
input Accel : float;
input Brake : float;
input Speed : float;

output CruiseSpeed := 0.0f : float;
output ThrottleCmd := 0.0f : float;
output CruiseState := 1 : integer;

constant SpeedInc = 2.5f : float; 
constant SpeedMax = 150.0f : float;
constant SpeedMin = 30.0f : float;
constant PedalThreshold = 3.0f : float;

signal 
	SetSpeed,
	DecelSpeed,
	AccelSpeed,
	BrakePressed,
	AccelPressed,
	SpeedBetweenLimits,
	ManageCruiseSpeed,
	ResetPI,
	UseAuto in
run ComputationalModule
||
run InterfaceModule
||
run CruiseStateControlFSM

end signal
end module

% >>> CRUSECONTROLLER_STRL
module ThrottleControlFSM:

input Accel : float;
input CruiseState : integer;
input CruiseSpeed : float;
input Speed : float;

output ThrottleCmd : float;

var throttleValue := 0.0f : float in
    loop
        if CruiseState = 1 then
            throttleValue := (CruiseSpeed - Speed) * 8.0f;
        else
            throttleValue := Accel;
        end if;
        if throttleValue > 45.0f then
            throttleValue := 45.0f;
        elsif throttleValue < 0.0f then
            throttleValue := 0.0f;
        end if;
        emit ThrottleCmd(throttleValue);
        pause;
    end loop;
end var

end module
module ComputationalModule:

input QuickAccel, QuickDecel, Set;
input Speed : float;
input Accel : float;
input CruiseState := 1 : integer;

output CruiseSpeed := 0.0f : float; % Hapus output, pakai signal!
output ThrottleCmd := 0.0f : float; % Hapus output, pakai signal!

signal ManageCruiseSpeed, LocalThrottleCmd, LocalCruiseSpeed in

    run CruiseSpeedModule
    ||
    run ThrottleControlModule

end signal
end module
module CruiseStateControlFSM:

input On, Off, Resume, Set, QuickAccel, QuickDecel;
input Accel : float;
input Brake : float;
input Speed : float;

output CruiseState : integer;

var state := 0 : integer in
    loop
        present Off then
            state := 0;
        elsif present On then
            state := 1;
        elsif present Brake then
            state := 2;
        elsif present Resume then
            state := 1;
        end present;
        emit CruiseState(state);
        pause;
    end loop;
end var

end modulemodule CruiseSpeedResolver:

input Speed : float;
input CruiseState : integer;
input SetSpeed, AccelSpeed, DecelSpeed;

output CruiseSpeed : float;

var cruiseTarget := 0.0f : float in
    loop
        present SetSpeed then
            cruiseTarget := Speed;
        elsif present AccelSpeed then
            cruiseTarget := cruiseTarget + 2.5f;
        elsif present DecelSpeed then
            cruiseTarget := cruiseTarget - 2.5f;
        end present;
        % Jaga cruiseTarget tetap dalam batas
        if cruiseTarget > 150.0f then
            cruiseTarget := 150.0f;
        elsif cruiseTarget < 30.0f then
            cruiseTarget := 30.0f;
        end if;
        emit CruiseSpeed(cruiseTarget);
        pause;
    end loop;
end var

end module
module CruiseSpeedControlFSM:

input Set, QuickAccel, QuickDecel;
input Speed : float;
input CruiseState : integer;

output SetSpeed, AccelSpeed, DecelSpeed;

var cruiseValue := 0.0f : float in
    loop
        present Set then
            cruiseValue := Speed;
            emit SetSpeed;
        elsif present QuickAccel then
            cruiseValue := cruiseValue + 2.5f;
            emit AccelSpeed;
        elsif present QuickDecel then
            cruiseValue := cruiseValue - 2.5f;
            emit DecelSpeed;
        end present;
        pause;
    end loop;
end var

end module
module ThrottleControlModule:

input Accel : float;
input CruiseState : integer;
input CruiseSpeed : float;
input Speed : float;

output ThrottleCmd : float; % Hapus output! Ganti signal ThrottleCmd di parent!

signal ResetPI, UseAuto, LocalThrottleCmd in

    % Resolver: menentukan mode auto/manual throttle
    run ThrottleResolver
    ||
    % FSM kontrol throttle (misal PI/PID logic)
    run ThrottleControlFSM

end signal
end module
module ThrottleResolver:

input Accel : float;
input CruiseState : integer;
input Speed : float;

output UseAuto, ResetPI;

loop
    if CruiseState = 1 then
        emit UseAuto;
    else
        emit ResetPI;
    end if;
    pause;
end loop;

end module
module InterfaceModule:

input Accel : float;
input Brake : float;

output AccelPressed, BrakePressed;

constant PedalThreshold = 3.0f : float;

loop
    if Accel > PedalThreshold then
        emit AccelPressed;
    end if;
    if Brake > PedalThreshold then
        emit BrakePressed;
    end if;
    pause;
end loop;

end module
module SpeedLimiter:

input Speed : float;

output SpeedBetweenLimits;

constant SpeedMin = 30.0f : float;
constant SpeedMax = 150.0f : float;

loop
    if Speed >= SpeedMin and Speed <= SpeedMax then
        emit SpeedBetweenLimits;
    end if;
    pause;
end loop;

end module
module PedalInterface:

input Accel : float;
input Brake : float;

output AccelPressed, BrakePressed;

constant PedalThreshold = 3.0f : float;

loop
    if Accel > PedalThreshold then
        emit AccelPressed;
    end if;
    if Brake > PedalThreshold then
        emit BrakePressed;
    end if;
    pause;
end loop;

end module
